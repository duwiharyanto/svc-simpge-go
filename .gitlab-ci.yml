stages:
  - analysis
  - build
  - deploy

variables:
  VERSIONED_IMAGE: ${REGISTRY_SERVER}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}
  VERSIONED_IMAGE_TAG: ${REGISTRY_SERVER}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG}
  SONAR_SOURCES: "."
  GIT_SSL_NO_VERIFY: "true"
  GIT_DEPTH: 5

sonarqube_scan:
  stage: analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - >
      sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.sources=$SONAR_SOURCES
      -Dsonar.scm.provider=git
      -Dsonar.exclusions='vendor/**'
      -Dsonar.qualitygate.wait=true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  tags:
    - untag

build_development:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo $KANIKO_SECRET | base64 -d > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE --skip-tls-verify
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  tags:
    - build

deploy_development:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: registry.uii.ac.id/uii-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context dev
    - sed -ri s#images#${VERSIONED_IMAGE}# deploy/dev-deployment.yaml
    - sed -ri s#project-name#${CI_PROJECT_NAME}# deploy/dev-deployment.yaml
    - sed -ri s#namespaces#${CI_PROJECT_ROOT_NAMESPACE}-dev# deploy/dev-deployment.yaml
    - kubectl apply -f deploy/dev-deployment.yaml
  dependencies:
    - build_development
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  tags:
    - deploy

build_staging:
  stage: build
  image: gcr.io/kaniko-project/executor:v1.14.0-debug
  script:
    - echo $KANIKO_SECRET | base64 -d > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE_TAG --skip-tls-verify
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(\d+\.)(\d+\.)(\d+\-(alpha|beta|rc)\d+)$/' # match X.Y.Z-alpha/beta/rcN tag format, ex: 0.1.0-alpha0
  tags:
    - build

deploy_staging:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: registry.uii.ac.id/uii-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context staging
    - sed -ri s#images#${VERSIONED_IMAGE_TAG}# deploy/stag-deployment.yaml
    - sed -ri s#project-name#${CI_PROJECT_NAME}# deploy/stag-deployment.yaml
    - sed -ri s#namespaces#${CI_PROJECT_ROOT_NAMESPACE}-stag# deploy/stag-deployment.yaml
    - kubectl apply -f deploy/stag-deployment.yaml
  dependencies:
    - build_staging
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(\d+\.)(\d+\.)(\d+\-(alpha|beta|rc)\d+)$/' # match X.Y.Z-alpha/beta/rcN tag format, ex: 0.1.0-alpha0
  tags:
    - deploy

build_production:
  stage: build
  image: gcr.io/kaniko-project/executor:v1.14.0-debug
  script:
    - echo $KANIKO_SECRET | base64 -d > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $VERSIONED_IMAGE_TAG --skip-tls-verify
  artifacts:
    name: $CI_COMMIT_REF_NAME
    paths:
      - deploy/
    expire_in: 60 sec
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(\d+\.)(\d+\.)(\d+)$/' # match X.Y.Z tag format, ex: 1.0.0
  tags:
    - build

deploy_production:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  image: registry.uii.ac.id/uii-project/interoperability/os/alpine:3.11-kubectl.1
  script:
    - echo $KUBE_CONFIG | base64 -d > /.kube/config
    - kubectl config use-context production
    - sed -ri s#images#${VERSIONED_IMAGE_TAG}# deploy/prod-deployment.yaml
    - sed -ri s#project-name#${CI_PROJECT_NAME}# deploy/prod-deployment.yaml
    - sed -ri s#namespaces#${CI_PROJECT_ROOT_NAMESPACE}-production# deploy/prod-deployment.yaml
    - kubectl apply -f deploy/prod-deployment.yaml
  dependencies:
    - build_production
  rules:
    - if: '$CI_COMMIT_TAG =~ /^(\d+\.)(\d+\.)(\d+)$/' # match X.Y.Z tag format, ex: 1.0.0
  tags:
    - deploy
